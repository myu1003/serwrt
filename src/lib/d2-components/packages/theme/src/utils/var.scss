// Only CSS variables should be exported here

// All functions starting with '--var-' return CSS: var(--d2-xxx)

@use 'sass:math';

$namespace: 'd2';

$bem-element-separator: '__';
$bem-modifier-separator: '--';
$bem-state-prefix: 'is-';










// --------+---------------------
// => base | breakpoints
// --------+---------------------

$--sm: 768px;
$--md: 992px;
$--lg: 1200px;
$--xl: 1920px;

$--breakpoints: (
  'xs': '(max-width: #{$--sm})',
  'sm': '(min-width: #{$--sm})',
  'md': '(min-width: #{$--md})',
  'lg': '(min-width: #{$--lg})',
  'xl': '(min-width: #{$--xl})'
);

$--breakpoints-spec: (
  'xs-only':     '(max-width: #{$--sm})',
  'sm-and-up':   '(min-width: #{$--sm})',
  'sm-only':     '(min-width: #{$--sm}) and (max-width: #{$--md})',
  'sm-and-down': '(max-width: #{$--md})',
  'md-and-up':   '(min-width: #{$--md})',
  'md-only':     '(min-width: #{$--md}) and (max-width: #{$--lg})',
  'md-and-down': '(max-width: #{$--lg})',
  'lg-and-up':   '(min-width: #{$--lg})',
  'lg-only':     '(min-width: #{$--lg}) and (max-width: #{$--xl})',
  'lg-and-down': '(max-width: #{$--xl})',
  'xl-only':     '(min-width: #{$--xl})',
);










// --------+---------------------
// => base | color
// --------+---------------------

$--d2-color: (
  gray:   ( 50: #F9FAFB, 100: #F3F4F6, 200: #E5E7EB, 300: #D1D5DB, 400: #9CA3AF, 500: #6B7280, 600: #4B5563, 700: #374151, 800: #1F2937, 900: #111827 ),
  red:    ( 50: #FEF2F2, 100: #FEE2E2, 200: #FECACA, 300: #FCA5A5, 400: #F87171, 500: #EF4444, 600: #DC2626, 700: #B91C1C, 800: #991B1B, 900: #7F1D1D ),
  yellow: ( 50: #FFFBEB, 100: #FEF3C7, 200: #FDE68A, 300: #FCD34D, 400: #FBBF24, 500: #F59E0B, 600: #D97706, 700: #B45309, 800: #92400E, 900: #78350F ),
  green:  ( 50: #ECFDF5, 100: #D1FAE5, 200: #A7F3D0, 300: #6EE7B7, 400: #34D399, 500: #10B981, 600: #059669, 700: #047857, 800: #065F46, 900: #064E3B ),
  blue:   ( 50: #EFF6FF, 100: #DBEAFE, 200: #BFDBFE, 300: #93C5FD, 400: #60A5FA, 500: #3B82F6, 600: #2563EB, 700: #1D4ED8, 800: #1E40AF, 900: #1E3A8A ),
  indigo: ( 50: #EEF2FF, 100: #E0E7FF, 200: #C7D2FE, 300: #A5B4FC, 400: #818CF8, 500: #6366F1, 600: #4F46E5, 700: #4338CA, 800: #3730A3, 900: #312E81 ),
  purple: ( 50: #F5F3FF, 100: #EDE9FE, 200: #DDD6FE, 300: #C4B5FD, 400: #A78BFA, 500: #8B5CF6, 600: #7C3AED, 700: #6D28D9, 800: #5B21B6, 900: #4C1D95 ),
  pink:   ( 50: #FDF2F8, 100: #FCE7F3, 200: #FBCFE8, 300: #F9A8D4, 400: #F472B6, 500: #EC4899, 600: #DB2777, 700: #BE185D, 800: #9D174D, 900: #831843 )
);
$--d2-color-alpha: 10, 30; // can be array like 0, 20, ... 100

@function --var-color($name, $_level: 500, $alpha: 100) {
  @if $alpha == 100 {
    @return var(--d2-color-#{$name}-#{$_level});
  } @else {
    @return var(--d2-color-#{$name}-#{$_level}-alpha-#{$alpha});
  }
}

:root {
  --d2-color-white: #FFFFFF;
  --d2-color-black: #000000;

  @each $_name, $_setting in $--d2-color {
    --d2-color-#{"" + $_name}-0: var(--d2-color-white);
    @each $_level, $_color in $_setting {
      --d2-color-#{"" + $_name}-#{$_level}: #{$_color};
      @each $alpha in $--d2-color-alpha {
        --d2-color-#{"" + $_name}-#{$_level}-alpha-#{$alpha}: #{rgba($_color, math.div($alpha, 100))};
      }
    }
  }
}










// --------+---------------------
// => base | shadow
// --------+---------------------

$--d2-shadow: (
  sm:    (0 1px 2px 0 rgba(0, 0, 0, 0.05)),
  base:  (0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)),
  md:    (0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)),
  lg:    (0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)),
  xl:    (0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)),
  xxl:   (0 25px 50px -12px rgba(0, 0, 0, 0.25)),
  inner: (inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)),
  none:  (0 0 #0000)
);

@function --var-shadow ($size) {
  @return var(--d2-shadow-#{$size});
}

:root {
  @each $_shadow, $_setting in $--d2-shadow {
    --d2-shadow-#{$_shadow}: #{$_setting};
  }
}










// --------+---------------------
// => base | space
// --------+---------------------

// --var-space(0.5) => var(--d2-space-1) => css:0.125rem => tw:m-0.5 | p-0.5 | space-x-0.5 | space-y-0.5
// --var-space(1)   => var(--d2-space-2) => css:0.25rem  => tw:m-1   | p-1   | space-x-1   | space-y-1

// use scss function --var-space() to corresponding to tailwind class name

$--d2-space: (
  mini:  1,
  base:  1.5,
  small: 1,
  large: 2
);

@function --var-space ($lv) {
  @return var(--d2-space-#{$lv * 2});
}

:root {
  @for $lv from 0 through 20 {
    --d2-space-#{$lv}: #{$lv * 0.125rem};
  }
  @each $_space, $_setting in $--d2-space {
    --d2-space-#{$_space}: #{--var-space($_setting)};
  }
}










// --------+---------------------
// => base | flex
// --------+---------------------

$--d2-flex-dir: top, right, bottom, left;

:root {
  @each $_space, $_setting in $--d2-space {
    --d2-flex-space-#{$_space}: var(--d2-space-#{$_space});
  }
}










// --------+---------------------
// => base | font
// --------+---------------------

$--d2-font-size: (
  xs:   ( size: 0.75rem, height: 1rem ),
  sm:   ( size: 0.875rem, height: 1.25rem ),
  base: ( size: 1rem, height: 1.5rem ),
  lg:   ( size: 1.125rem, height: 1.75rem ),
  xl:   ( size: 1.25rem, height: 1.75rem ),
  xxl:  ( size: 1.5rem, height: 2rem ),
  3xl:  ( size: 1.875rem, height: 2.25rem ),
  4xl:  ( size: 2.25rem, height: 2.5rem ),
  5xl:  ( size: 3rem, height: 1 ),
  6xl:  ( size: 3.75rem, height: 1 ),
  7xl:  ( size: 4.5rem, height: 1 ),
  8xl:  ( size: 6rem, height: 1 ),
  9xl:  ( size: 8rem, height: 1 )
);

@function --var-font-weight ($value) {
  @return var(--d2-font-weight-#{$value});
}

@function --var-font-size ($size) {
  @return var(--d2-font-size-#{$size});
}

@function --var-line-height ($size) {
  @return var(--d2-line-height-#{$size});
}

:root {
  @for $i from 1 through 9 {
    --d2-font-weight-#{$i * 100}: #{$i * 100};
  }

  @each $_name, $_setting in $--d2-font-size {
    --d2-font-size-#{$_name}: #{map-get($_setting, size)};
    --d2-line-height-#{$_name}: #{map-get($_setting, height)};
  }

  // --d2-line-height: 1.5715;
}










// --------+---------------------
// => base | transition
// --------+---------------------

$--d2-transition-speed: (
  fast: 0.1s,
  base: 0.3s,
  slow: 0.5s
);

@function --var-transition-speed ($speed) {
  @return var(--d2-transition-speed-#{$speed});
}

:root {
  @each $_name, $_duration in $--d2-transition-speed {
    --d2-transition-speed-#{$_name}: #{$_duration};
  }
}










// --------+---------------------
// => base | border
// --------+---------------------

$--d2-border-radius: (
  none: 0px,
  sm:   0.125rem,
  base: 0.25rem,
  md:   0.375rem,
  lg:   0.5rem,
  xl:   0.75rem,
  xxl:  1rem,
  3xl:  1.5rem,
  full: 9999px
);

@function --var-radius ($size) {
  @return var(--d2-border-radius-#{$size});
}

:root {
  @each $_name, $_radius in $--d2-border-radius {
    --d2-border-radius-#{$_name}: #{$_radius};
  }

  --d2-border-width: 1px;
  --d2-border-style: solid;
  --d2-border-color: #{--var-color(gray, 200)};
}










// --------+---------------------
// => base | ring
// --------+---------------------

$--d2-ring-width: 0, 4;
$--d2-ring-offset-width: 0, 4;

:root {
  @for $i from nth($--d2-ring-width, 1) through nth($--d2-ring-width, 2) {
    --d2-ring-width-#{$i}: #{$i}px;
  }

  @for $i from nth($--d2-ring-offset-width, 1) through nth($--d2-ring-offset-width, 2) {
    --d2-ring-offset-width-#{$i}: #{$i}px;
  }
}










// -------------+----------------
// => component | button
// -------------+----------------

$--d2-button-status-base: (
  base:           ( font-color: 700, border-color: 300, background-color: 0 ),
  hover:          ( font-color: 700, border-color: 300, background-color: 50 ),
  focus:          ( font-color: 700, border-color: 300, background-color: 50 ),
  active:         ( font-color: 700, border-color: 400, background-color: 50 ),
  disabled:       ( font-color: 400, border-color: 200, background-color: 0 ),
  loading:        ( font-color: 400, border-color: 200, background-color: 0 ),
  // plain
  plain:          ( font-color: 700, border-color: 300, background-color: 0 ),
  plain-hover:    ( font-color: 700, border-color: 400, background-color: 0 ),
  plain-focus:    ( font-color: 700, border-color: 400, background-color: 0 ),
  plain-active:   ( font-color: 700, border-color: 400, background-color: 50 ),
  plain-disabled: ( font-color: 400, border-color: 200, background-color: 0 ),
  plain-loading:  ( font-color: 400, border-color: 200, background-color: 0 ),
  // text
  text:           ( font-color: 700 ),
  text-hover:     ( font-color: 600 ),
  text-focus:     ( font-color: 600 ),
  text-active:    ( font-color: 800 ),
  text-disabled:  ( font-color: 500 ),
  text-loading:   ( font-color: 500 )
);

$--d2-button-status-colorful: (
  base:           ( font-color: 0,   border-color: 500, background-color: 500 ),
  hover:          ( font-color: 100, border-color: 500, background-color: 500 ),
  focus:          ( font-color: 100, border-color: 500, background-color: 500 ),
  active:         ( font-color: 0,   border-color: 600, background-color: 600 ),
  disabled:       ( font-color: 0,   border-color: 300, background-color: 300 ),
  // plain
  plain:          ( font-color: 500, border-color: 300, background-color: 50 ),
  plain-hover:    ( font-color: 50,  border-color: 500, background-color: 500 ),
  plain-focus:    ( font-color: 200, border-color: 500, background-color: 500 ),
  plain-active:   ( font-color: 50,  border-color: 600, background-color: 600 ),
  plain-disabled: ( font-color: 300, border-color: 200, background-color: 50 ),
  // text
  text:           ( font-color: 500 ),
  text-hover:     ( font-color: 400 ),
  text-focus:     ( font-color: 400 ),
  text-active:    ( font-color: 600 ),
  text-disabled:  ( font-color: 300 )
);

// 'base' must be set before other names
// Because the generation of styles is based on the order of setting
// 'base' as the default style should appear first in the style sheet so that it can be overridden by other styles
$--d2-button-sizes: (
  base:  ( border-radius: base, font-size: base, font-weight: 500, padding-y: 1,   padding-x: 2.5 ),
  mini:  ( border-radius: sm,   font-size: xs,   font-weight: 400, padding-y: 0,   padding-x: 1 ),
  small: ( border-radius: sm,   font-size: sm,   font-weight: 400, padding-y: 0.5, padding-x: 1.5 ),
  large: ( border-radius: md,   font-size: lg,   font-weight: 600, padding-y: 1.5, padding-x: 3 )
);

:root {
  // base color
  @each $_status, $_status-setting in $--d2-button-status-base {
    @each $_style-name, $_style-value in $_status-setting {
      --d2-button-#{$_style-name}-base-#{$_status}: #{--var-color('gray', map-get($_status-setting, $_style-name))};
    }
  }
  // colorful
  @each $_color, $_setting in $--d2-color {
    @each $_status, $_status-setting in $--d2-button-status-colorful {
      @each $_style-name, $_style-value in $_status-setting {
        --d2-button-#{$_style-name}-#{"" + $_color}-#{$_status}: #{--var-color($_color, map-get($_status-setting, $_style-name))};
      }
    }
  }

  @each $_size, $_size-setting in $--d2-button-sizes {
    --d2-button-border-radius-#{$_size}: #{--var-radius(map-get($_size-setting, border-radius))};
    --d2-button-font-size-#{$_size}: #{--var-font-size(map-get($_size-setting, font-size))};
    --d2-button-line-height-#{$_size}: #{--var-line-height(map-get($_size-setting, font-size))};
    --d2-button-font-weight-#{$_size}: #{--var-font-weight(map-get($_size-setting, font-weight))};
    --d2-button-padding-y-#{$_size}: #{--var-space(map-get($_size-setting, padding-y))};
    --d2-button-padding-x-#{$_size}: #{--var-space(map-get($_size-setting, padding-x))};
    --d2-button-space-#{$_size}: var(--d2-space-#{$_size});
    --d2-button-group-space-#{$_size}: var(--d2-space-#{$_size});
  }
}










// -------------+----------------
// => component | input
// -------------+----------------

$--d2-input-status-base: (
  base:           ( font-color: 500, border-color: 300, background-color: 0 ),
  hover:          ( font-color: 500, border-color: 300, background-color: 0 ),
  focus:          ( font-color: 500, border-color: 300, background-color: 0 ),
  active:         ( font-color: 600, border-color: 400, background-color: 0 ),
  disabled:       ( font-color: 400, border-color: 200, background-color: 0 )
);

$--d2-input-status-colorful: (
  base:           ( font-color: 500, border-color: 300, background-color: 0 ),
  hover:          ( font-color: 500, border-color: 300, background-color: 50 ),
  focus:          ( font-color: 500, border-color: 300, background-color: 50 ),
  active:         ( font-color: 600, border-color: 400, background-color: 50 ),
  disabled:       ( font-color: 400, border-color: 200, background-color: 0 )
);

// 'base' must be set before other names
// Because the generation of styles is based on the order of setting
// 'base' as the default style should appear first in the style sheet so that it can be overridden by other styles
$--d2-input-sizes: (
  base:  ( border-radius: base, font-size: base, font-weight: 500, padding-y: 1,   padding-x: 2.5 ),
  mini:  ( border-radius: sm,   font-size: xs,   font-weight: 400, padding-y: 0,   padding-x: 1 ),
  small: ( border-radius: sm,   font-size: sm,   font-weight: 400, padding-y: 0.5, padding-x: 1.5 ),
  large: ( border-radius: md,   font-size: lg,   font-weight: 600, padding-y: 1.5, padding-x: 3 )
);

:root {
  // base color
  @each $_status, $_status-setting in $--d2-input-status-base {
    @each $_style-name, $_style-value in $_status-setting {
      --d2-input-#{$_style-name}-base-#{$_status}: #{--var-color('gray', map-get($_status-setting, $_style-name))};
    }
  }
  // colorful
  @each $_color, $_setting in $--d2-color {
    @each $_status, $_status-setting in $--d2-input-status-colorful {
      @each $_style-name, $_style-value in $_status-setting {
        --d2-input-#{$_style-name}-#{"" + $_color}-#{$_status}: #{--var-color($_color, map-get($_status-setting, $_style-name))};
      }
    }
  }

  @each $_size, $_size-setting in $--d2-input-sizes {
    --d2-input-border-radius-#{$_size}: #{--var-radius(map-get($_size-setting, border-radius))};
    --d2-input-font-size-#{$_size}: #{--var-font-size(map-get($_size-setting, font-size))};
    --d2-input-line-height-#{$_size}: #{--var-line-height(map-get($_size-setting, font-size))};
    --d2-input-font-weight-#{$_size}: #{--var-font-weight(map-get($_size-setting, font-weight))};
    --d2-input-padding-y-#{$_size}: #{--var-space(map-get($_size-setting, padding-y))};
    --d2-input-padding-x-#{$_size}: #{--var-space(map-get($_size-setting, padding-x))};
    --d2-input-space-#{$_size}: var(--d2-space-#{$_size});
  }
}
